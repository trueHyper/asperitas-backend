// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	claims "redditclone/pkg/claims"

	mock "github.com/stretchr/testify/mock"

	post "redditclone/pkg/post"
)

// ServicePost is an autogenerated mock type for the ServicePost type
type ServicePost struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: postID, comment, _a2
func (_m *ServicePost) AddComment(postID string, comment string, _a2 *claims.Claims) (*post.Post, error) {
	ret := _m.Called(postID, comment, _a2)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, *claims.Claims) (*post.Post, error)); ok {
		return rf(postID, comment, _a2)
	}
	if rf, ok := ret.Get(0).(func(string, string, *claims.Claims) *post.Post); ok {
		r0 = rf(postID, comment, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, *claims.Claims) error); ok {
		r1 = rf(postID, comment, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddVote provides a mock function with given fields: postID, username, action
func (_m *ServicePost) AddVote(postID string, username string, action string) (*post.Post, error) {
	ret := _m.Called(postID, username, action)

	if len(ret) == 0 {
		panic("no return value specified for AddVote")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*post.Post, error)); ok {
		return rf(postID, username, action)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *post.Post); ok {
		r0 = rf(postID, username, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(postID, username, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePost provides a mock function with given fields: _a0, username, id
func (_m *ServicePost) CreatePost(_a0 *post.Post, username string, id string) error {
	ret := _m.Called(_a0, username, id)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*post.Post, string, string) error); ok {
		r0 = rf(_a0, username, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: postID
func (_m *ServicePost) Delete(postID string) error {
	ret := _m.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with no fields
func (_m *ServicePost) GetAll() []*post.Post {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func() []*post.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	return r0
}

// GetByCategory provides a mock function with given fields: category
func (_m *ServicePost) GetByCategory(category string) []*post.Post {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for GetByCategory")
	}

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(string) []*post.Post); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *ServicePost) GetByID(id string) (*post.Post, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*post.Post, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *post.Post); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: username
func (_m *ServicePost) GetByUser(username string) []*post.Post {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(string) []*post.Post); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	return r0
}

// RemoveComment provides a mock function with given fields: postID, commID
func (_m *ServicePost) RemoveComment(postID string, commID string) (*post.Post, error) {
	ret := _m.Called(postID, commID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveComment")
	}

	var r0 *post.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*post.Post, error)); ok {
		return rf(postID, commID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *post.Post); ok {
		r0 = rf(postID, commID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*post.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(postID, commID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServicePost creates a new instance of ServicePost. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServicePost(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServicePost {
	mock := &ServicePost{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
